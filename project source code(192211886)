 #include <stdio.h>
 #include <stdbool.h>
 #define MAX 100
 bool isSafe(int v, int graph[MAX][MAX], int color[], int c, int V) {
 for (int i = 0; i < V; i++)
 if (graph[v][i] && color[i] == c)
 return false;
 return true;
 }
 bool graphColoringUtil(int graph[MAX][MAX], int m, int color[], int v, int V) {
 if (v == V)
 return true;
 for (int c = 1; c <= m; c++) {
if (isSafe(v, graph, color, c, V)) {
 color[v] = c;
 if (graphColoringUtil(graph, m, color, v + 1, V))
 return true;
 color[v] = 0;
 }
 }
 return false;
 }
 bool graphColoring(int graph[MAX][MAX], int m, int V) {
 int color[MAX] = {0};
 if (!graphColoringUtil(graph, m, color, 0, V)) {
 printf("Solution does not exist\n");
 return false;
 }
 // Print the solution (color assignments)
 printf("Solution exists with the following group assignments (colors):\n");
 for (int i = 0; i < V; i++)
 printf("Vertex %d---> Group %d\n", i + 1, color[i]);
 return true;
 }
int main() {
 int V;
 printf("Enter the number of elements: ");
 scanf("%d", &V);
 int graph[MAX][MAX];
 printf("Enter the adjacency matrix (1 if two elements are incompatible, 0 otherwise):\n");
 for (int i = 0; i < V; i++) {
 for (int j = 0; j < V; j++) {
 scanf("%d", &graph[i][j]);
 }
 }
 int m;
 printf("Enter the maximum number of groups (colors) to try: ");
 scanf("%d", &m);
 if (!graphColoring(graph, m, V)) {
 printf("Unable to group the elements with the given constraints using %d groups.\n", m);
 }
 return 0;
 }
